<?php
/**
 *
 * @copyright Copyright (c) 2013-2014 KipsProduction (http://www.kips.gr.jp)
 * @license   http://www.kips.gr.jp/newbsd/LICENSE.txt New BSD License
 */

namespace NpPageTest\Service;

use Flower\Test\TestTool;
use NpPage\Service\BlockRepositoryFactory;
use Zend\ServiceManager\ServiceManager;

/**
 * Generated by PHPUnit_SkeletonGenerator on 2014-11-18 at 16:29:46.
 */
class BlockRepositoryFactoryTest extends \PHPUnit_Framework_TestCase
{
    /**
     * @var BlockRepositoryFactory
     */
    protected $object;

    protected $serviceLocator;

    protected $configArray =  array();

    protected $blockPluginManager;

    protected $configLoader;

    protected $repository;

    /**
     * Sets up the fixture, for example, opens a network connection.
     * This method is called before a test is executed.
     */
    protected function setUp()
    {
        $this->configArray = array();
        $this->object = new BlockRepositoryFactory;
        $this->blockPluginManager = $this->getMock('NpPage\\BlockPluginManager');
        $this->configLoader = $this->getMock('NpPage\\Config\\Loader\\ConfigLoaderInterface');
        $this->serviceLocator = new ServiceManager;
        $this->serviceLocator->setService('NpPage_BlockPluginManager', $this->blockPluginManager);
        $this->serviceLocator->setService('NpPage_ConfigLoader', $this->configLoader);
    }

    /**
     * @covers NpPage\Service\BlockRepositoryFactory::createService
     */
    public function testCreateService()
    {
        $blockConfig = array('a' => 'A');
        $errorPage = 'foo';
        $renderErrorPage = 'bar';
        $this->configArray = array(
            'np-page' => array(
                'blocks_service_name' => 'NpPage_BlockPluginManager',
                'config_loader_name' => 'NpPage_ConfigLoader',
                'blocks' => $blockConfig,
                'error_page' => $errorPage,
                'render_error_page' => $renderErrorPage,
            ),
        );
        $this->serviceLocator->setService('Config', $this->configArray);
        $res = $this->object->createService($this->serviceLocator);
        $this->assertInstanceOf(TestTool::getPropertyValue($this->object, 'repositoryClass'), $res);
        $this->assertSame($this->blockPluginManager, $res->getBlockPluginManager());
        $this->assertSame($this->configLoader, $res->getConfigLoader());
        $this->assertEquals($blockConfig, TestTool::getPropertyValue($res, 'blockConfig'));
        $this->assertEquals($errorPage, $res->getErrorPage());
        $this->assertEquals($renderErrorPage, $res->getRenderErrorPage());
    }
}
