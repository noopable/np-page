<?php
/*
 *
 *
 * @copyright Copyright (c) 2014-2014 KipsProduction (http://www.kips.gr.jp)
 * @license   http://www.kips.gr.jp/newbsd/LICENSE.txt New BSD License
 */

namespace NpPageTest\Block;

use Flower\Test\TestTool;
use NpPage\Block\Dispatch;
use NpPage\BlockInitializer;
use NpPage\Service;
use Zend\EventManager\EventManager;
use Zend\Mvc\MvcEvent;
use Zend\Mvc\Router\RouteMatch;
use Zend\ServiceManager\ServiceManager;
use Zend\View\Model\ViewModel;

/**
 * Generated by PHPUnit_SkeletonGenerator on 2014-11-16 at 08:59:37.
 */
class DispatchTest extends \PHPUnit_Framework_TestCase
{
    /**
     * @var Dispatch
     */
    protected $object;

    /**
     * Sets up the fixture, for example, opens a network connection.
     * This method is called before a test is executed.
     */
    protected function setUp()
    {
        $this->object = new Dispatch;
    }

    /**
     * Tears down the fixture, for example, closes a network connection.
     * This method is called after a test is executed.
     */
    protected function tearDown()
    {
    }

    /**
     * @covers NpPage\Block\Dispatch::configure
     */
    public function testConfigure()
    {
        $config = array(
            'controller' => 'foo',
            'dispatch' => array('a' => 'A'),
            'signature' => array('b' => 'B'),
        );
        $this->object->configure($config);
        $this->assertEquals('foo', TestTool::getPropertyValue($this->object, 'controllerName'));
        $this->assertEquals(array('a' => 'A'), TestTool::getPropertyValue($this->object, 'dispatchOptions'));
        $this->assertEquals(array('b' => 'B'), TestTool::getPropertyValue($this->object, 'signature'));
    }

    public function testInit()
    {
        $serviceLocator = new ServiceManager;
        $eventManager = new EventManager;
        $serviceLocator->setService('EventManager', $eventManager);
        $blockInitializer = new BlockInitializer;
        $blockInitializer->setServiceLocator($serviceLocator);
        $this->object->init($blockInitializer);
        $state = $this->object->getState();
        $this->assertTrue($state->checkFlag($state::INITIALIZED));
        $this->assertTrue($state->checkFlag($state::BUILT));
    }

    /**
     * @see FetchActionResultTraitTest::testFetchActionResult*
     */
    public function testOnDispatch()
    {
        $e = new MvcEvent;
        $variables = array(
            'foo' => 'bar',
        );
        $resultModel = new ViewModel($variables);
        $e->setResult($resultModel);

        $params = array('controller' => 'foo', 'a' => 'b');
        $routeMatch = new RouteMatch($params);
        $e->setRouteMatch($routeMatch);

        $config = array(
            'controller' => 'foo',
            'dispatch' => array('action' => 'index'),
            'signature' => array('a' => 'b'),
        );
        $this->object->configure($config);
        $res = $this->object->postDispatch($e);
        $this->assertSame($resultModel, $res);
    }

    /**
     * @see FetchActionResultTraitTest::testFetchActionResult*
     */
    public function testFetchActionResultFailoverDispatch()
    {
        $controllerName = 'foo';
        $dispatchOptions = array(
            'action' => 'index',
        );
        $e = new MvcEvent;
        $variables = array(
            'foo' => 'bar',
        );
        $resultModel = new ViewModel($variables);
        $e->setResult($resultModel);

        $params = array('controller' => 'foo', 'a' => 'b');
        $routeMatch = new RouteMatch($params);
        $e->setRouteMatch($routeMatch);

        $plugin = $this->getMockBuilder('Zend\\Mvc\\Controller\\Plugin\\Forward')
                ->disableOriginalConstructor()->getMock();
        $plugin->expects($this->once())
                ->method('dispatch')
                ->with($this->equalTo($controllerName), $this->equalTo($dispatchOptions))
                ->will($this->returnValue($resultModel));

        $pluginManager = $this->getMock('Zend\\Mvc\\Controller\\PluginManager');
        $pluginManager->expects($this->once())
                ->method('get')
                ->with($this->equalTo('forward'))
                ->will($this->returnValue($plugin));
        $sl = new ServiceManager;
        $sl->setService('ControllerPluginManager', $pluginManager);

        $this->object->setServiceLocator($sl);

        $config = array(
            'controller' => $controllerName,
            'dispatch' => $dispatchOptions,
            'signature' => array('a' => 'A'),//mismatch signature
        );
        $this->object->configure($config);
        $res = $this->object->postDispatch($e);

        $this->assertSame($resultModel, $res);

    }
}
