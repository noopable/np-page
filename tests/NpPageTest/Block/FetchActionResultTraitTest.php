<?php
/**
 *
 * @copyright Copyright (c) 2013-2014 KipsProduction (http://www.kips.gr.jp)
 * @license   http://www.kips.gr.jp/newbsd/LICENSE.txt New BSD License
 */

namespace NpPageTest\Block;

use Flower\Test\TestTool;
use NpPageTest\Block\TestAsset\FetchActionResult;
use Zend\EventManager\EventManager;
use Zend\Mvc\MvcEvent;
use Zend\Mvc\Router\RouteMatch;
use Zend\View\Model\ViewModel;


/**
 * Generated by PHPUnit_SkeletonGenerator on 2014-11-15 at 19:40:20.
 */
class FetchActionResultTraitTest extends \PHPUnit_Framework_TestCase
{
    /**
     * @var FetchActionResultTrait
     */
    protected $object;

    /**
     * Sets up the fixture, for example, opens a network connection.
     * This method is called before a test is executed.
     */
    protected function setUp()
    {
        $this->object = new FetchActionResult;
    }

    /**
     * Tears down the fixture, for example, closes a network connection.
     * This method is called after a test is executed.
     */
    protected function tearDown()
    {
    }

    /**
     * @covers NpPage\Block\FetchActionResultTrait::attach
     */
    public function testAttach()
    {
        $eventManager = new EventManager;
        $this->object->attach($eventManager);
        $listeners = TestTool::getPropertyValue($this->object, 'listeners');
        $this->assertInstanceOf('Zend\\Stdlib\\CallbackHandler', $listeners[0]);
        $this->assertEquals(Array ('event' => 'dispatch','priority' => -95)
                , TestTool::getPropertyValue($listeners[0], 'metadata'));
    }

    /**
     * @covers NpPage\Block\FetchActionResultTrait::fetchActionResult
     */
    public function testFetchActionResultReturnNullWithoutResultViewModel()
    {
        $e = new MvcEvent;
        $res = $this->object->fetchActionResult($e);
        $this->assertNull($res);
    }

    /**
     * @covers NpPage\Block\FetchActionResultTrait::fetchActionResult
     */
    public function testFetchActionResultStandardCase()
    {
        $e = new MvcEvent;
        $variables = array(
            'foo' => 'bar',
        );
        $resultModel = new ViewModel($variables);
        $e->setResult($resultModel);

        $params = array('controller' => 'foo', 'a' => 'b');
        $routeMatch = new RouteMatch($params);
        $e->setRouteMatch($routeMatch);

        $res = $this->object->fetchActionResult($e);
        $this->assertNull($res);

    }

    /**
     * @dataProvider providesRouteMatchParameters1
     * @covers NpPage\Block\FetchActionResultTrait::fetchActionResult
     */
    public function testFetchActionResultReturnNullWithoutValidParameters($controller, $signature, $params)
    {
        $e = new MvcEvent;
        $variables = array(
            'foo' => 'bar',
        );
        $resultModel = new ViewModel($variables);
        $e->setResult($resultModel);

        $this->object->setControllerName($controller);
        $this->object->setSignature($signature);
        $routeMatch = new RouteMatch($params);
        $e->setRouteMatch($routeMatch);

        $res = $this->object->fetchActionResult($e);
        $this->assertNull($res);
    }

    /**
     *
     *
     * @return array
     */
    public function providesRouteMatchParameters1()
    {
        return array(
            array(
                    'foo',
                    array('a' => 'b'),
                    array(
                        'a' => 'b',
                    ),
            ),
            array(
                    'foo',
                    array('a' => 'b'),
                    array(
                        'controller' => 'bar',
                        'a' => 'b',
                    ),
            ),
            array(
                    'foo',
                    array('a' => 'b'),
                    array(
                        'controller' => 'foo',
                    ),
            ),
            array(
                    'foo',
                    array('a' => 'b'),
                    array(
                        'controller' => 'foo',
                        'a' => 'c',
                    ),
            ),
        );
    }

    /**
     * @covers NpPage\Block\FetchActionResultTrait::fetchActionResult
     */
    public function testFetchActionResult()
    {
        $e = new MvcEvent;
        $variables = array(
            'foo' => 'bar',
        );
        $resultModel = new ViewModel($variables);
        $e->setResult($resultModel);

        $params = array('controller' => 'foo', 'a' => 'b');
        $routeMatch = new RouteMatch($params);
        $e->setRouteMatch($routeMatch);

        $this->object->setSignature(array('a' => 'b'));
        $this->object->setControllerName('foo');
        $res = $this->object->fetchActionResult($e);
        $this->assertSame($resultModel, $res);
    }
}
