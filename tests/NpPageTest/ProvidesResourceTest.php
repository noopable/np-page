<?php
/*
 *
 *
 * @copyright Copyright (c) 2014-2014 KipsProduction (http://www.kips.gr.jp)
 * @license   http://www.kips.gr.jp/newbsd/LICENSE.txt New BSD License
 */

namespace NpPageTest;

use Flower\Test\TestTool;
use NpPageTest\TestAsset\ProvidesResource;

/**
 * Generated by PHPUnit_SkeletonGenerator on 2014-11-12 at 19:56:22.
 */
class ProvidesResourceTest extends \PHPUnit_Framework_TestCase
{
    /**
     * @var ProvidesResource
     */
    protected $object;

    /**
     * Sets up the fixture, for example, opens a network connection.
     * This method is called before a test is executed.
     */
    protected function setUp()
    {
        $this->object = new ProvidesResource;
    }

    /**
     * Tears down the fixture, for example, closes a network connection.
     * This method is called after a test is executed.
     */
    protected function tearDown()
    {
    }



    /**
     * @covers NpPage\ProvidesResource::setName
     */
    public function testSetName()
    {
        $this->object->setName('foo');
        $this->assertEquals('foo', TestTool::getPropertyValue($this->object, 'name'));
    }

    /**
     * @covers NpPage\ProvidesResource::getName
     */
    public function testGetName()
    {
        $this->assertEquals('', $this->object->getName());
        $this->object->setName('foo');
        $this->assertEquals('foo', $this->object->getName());
    }

    /**
     * @covers NpPage\ProvidesResource::setResourceClass
     */
    public function testSetResourceClass()
    {
        $this->object->setResourceClass('foo');
        $this->assertEquals('foo', $this->object->class);
    }

    /**
     * @covers NpPage\ProvidesResource::getResourceClass
     */
    public function testGetResourceClass()
    {
        $this->assertNull($this->object->class);
        $this->assertEquals('NpPageTest\\TestAsset\\ProvidesResource', $this->object->getResourceClass());
        $this->object->setResourceClass('foo');
        $this->assertEquals('foo', $this->object->getResourceClass());
    }

    /**
     * @covers NpPage\ProvidesResource::getResourceId
     */
    public function testGetResourceId()
    {
        $this->object->setResourceClass('foo');
        $this->assertEquals('foo', $this->object->getResourceId());
        $this->object->setName('bar');
        $this->assertEquals('foo::bar', $this->object->getResourceId());
    }

    /**
     * @covers NpPage\ProvidesResource::setPrototype
     */
    public function testSetPrototype()
    {
        $mock = $this->getMock('NpPage\\ResourceInterface');
        $this->object->setPrototype($mock);
        $this->assertSame($mock, TestTool::getPropertyValue($this->object, 'prototype'));
    }

    /**
     * @covers NpPage\ProvidesResource::setOption
     */
    public function testSetOption()
    {
        $val = new \ArrayObject(array());
        $this->object->setOption('foo', $val);
        $this->assertSame($val, TestTool::getPropertyValue($this->object, 'options')['foo']);
    }

    /**
     * @covers NpPage\ProvidesResource::getOption
     */
    public function testGetOption()
    {
        $val = new \ArrayObject(array());
        $this->object->setOption('foo', $val);
        $this->assertSame($val, $this->object->getOption('foo'));
        $this->assertFalse($this->object->getOption('bar', false), 'return default value ');

        //prototype get
        $prototype = new ProvidesResource;
        $prototype->setOption('baz', array());
        $this->object->setPrototype($prototype);
        $this->assertEquals(array(), $this->object->getOption('baz', 'default'));
    }

    /**
     * @covers NpPage\ProvidesResource::setOptions
     */
    public function testSetOptions()
    {
        $this->object->setOption('a', 'A');
        $options = array(
            'foo' => 'Foo',
            'bar' => 'BAR',
        );
        $this->object->setOptions($options);
        $this->assertEquals('Foo', $this->object->getOption('foo'));
        $this->assertEquals('A', $this->object->getOption('a'));
        $this->object->setOptions($options, true);
        $this->assertNull($this->object->getOption('a'));

        $this->object->setOption('a', 'A');
        $options = new \ArrayIterator($options);
        $this->object->setOptions($options);
        $this->assertEquals('A', $this->object->getOption('a'));
    }

    /**
     * @covers NpPage\ProvidesResource::setDefaultOptions
     */
    public function testSetDefaultOptions()
    {
        $this->object->setOption('a', 'A');
        $options = array(
            'a' => 'B', //キーaは重複するが、上書きしない。
            'foo' => 'Foo',
            'bar' => 'BAR',
        );
        $this->object->setDefaultOptions($options);
        $this->assertEquals('Foo', $this->object->getOption('foo'));
        $this->assertEquals('A', $this->object->getOption('a'));

        $this->object->setOption('a', 'A');
        $options = new \ArrayIterator($options);
        $this->object->setDefaultOptions($options);
        $this->assertEquals('A', $this->object->getOption('a'));
    }

    /**
     * @covers NpPage\ProvidesResource::getOptions
     */
    public function testGetOptions()
    {
        $this->object->setOption('a', 'A');
        $options = array(
            'foo' => 'Foo',
            'bar' => 'BAR',
        );
        $this->object->setOptions($options);
        $this->assertEquals(array_merge(array('a' => 'A'), $options), $this->object->getOptions());
    }

    /**
     * @covers NpPage\ProvidesResource::setProperty
     */
    public function testSetProperty()
    {
        $this->object->setProperty('foo', 'bar');
        $this->assertEquals('bar', TestTool::getPropertyValue($this->object, 'properties')['foo']);
    }

    /**
     * @covers NpPage\ProvidesResource::getProperty
     */
    public function testGetProperty()
    {
        $this->object->setProperty('foo', 'bar');
        $this->assertEquals('bar', $this->object->getProperty('foo'));
    }

    /**
     * @covers NpPage\ProvidesResource::issetProperty
     * @todo   Implement testIssetProperty().
     */
    public function testIssetProperty()
    {
        $this->object->setProperty('foo', 'bar');
        $this->assertTrue($this->object->issetProperty('foo'));

        $prototype = new ProvidesResource;
        $prototype->setProperty('a', 'A');
        $this->object->setPrototype($prototype);

        $this->assertTrue($this->object->issetProperty('a'));
        $this->assertFalse($this->object->issetProperty('a', false));
    }

    /**
     * @covers NpPage\ProvidesResource::setProperties
     */
    public function testSetProperties()
    {
        $this->object->setProperty('a', 'A');
        $properties = array(
            'foo' => 'FOO',
            'bar' => 'BAR',
        );
        $this->object->setProperties($properties);
        $this->assertEquals(['a' => 'A', 'foo' => 'FOO', 'bar' => 'BAR'], TestTool::getPropertyValue($this->object, 'properties')->getArrayCopy());

        //test clear option
        $this->object->setProperties($properties, true);

        $this->assertFalse($this->object->issetProperty('a'));
    }

    /**
     * @covers NpPage\ProvidesResource::getProperties
     */
    public function testGetProperties()
    {
        $this->object->setProperty('a', 'A');
        $properties = array(
            'foo' => 'FOO',
            'bar' => 'BAR',
        );
        $this->object->setProperties($properties);
        $this->assertEquals(['a' => 'A', 'foo' => 'FOO', 'bar' => 'BAR'], $this->object->getProperties()->getArrayCopy());
    }

    /**
     * @covers NpPage\ProvidesResource::configureResource
     */
    public function testConfigureResource()
    {
        $name = 'named';
        $class = 'className';
        $options = array(
            'bar' => 'BAR',
        );
        $defaultOptions = array(
            'bar' => 'default_BAR',
            'baz' => 'default_BAZ',
        );
        $properties = array(
            'foo' => 'FOO',
        );

        $prototype = new ProvidesResource;
        $prototype->setProperty('a', 'proto_A');
        $this->object->setPrototype($prototype);

        $config = array(
            'properties' => $properties,
            'options' => $options,
            'default_options' => $defaultOptions,
            'name' => $name,
            'class' => $class,
            'direct' => 'direct_val',
        );

        $this->object->configureResource($config);

        $this->assertEquals($name, $this->object->getName());
        $this->assertEquals($class, $this->object->getResourceClass());
        $this->assertEquals('BAR', $this->object->getOption('bar'));
        $this->assertEquals('default_BAZ', $this->object->getOption('baz'));
        $this->assertEquals('direct_val', $this->object->getProperty('direct'));
        $this->assertEquals('proto_A', $this->object->getProperty('a'));
    }
}
