<?php
/*
 *
 *
 * @copyright Copyright (c) 2014-2014 KipsProduction (http://www.kips.gr.jp)
 * @license   http://www.kips.gr.jp/newbsd/LICENSE.txt New BSD License
 */

namespace NpPageTest;

use Flower\Test\TestTool;
use NpPage\Service;
use Zend\Mvc\MvcEvent;
use Zend\Mvc\Router\RouteMatch;

/**
 * Generated by PHPUnit_SkeletonGenerator on 2014-11-18 at 13:33:15.
 */
class ServiceTest extends \PHPUnit_Framework_TestCase
{
    /**
     * @var Service
     */
    protected $object;

    /**
     * Sets up the fixture, for example, opens a network connection.
     * This method is called before a test is executed.
     */
    protected function setUp()
    {
        $this->object = new Service;
    }

    /**
     * Tears down the fixture, for example, closes a network connection.
     * This method is called after a test is executed.
     */
    protected function tearDown()
    {
    }

    /**
     * @covers NpPage\Service::setRepository
     */
    public function testSetRepository()
    {
        $repository = $this->getMock('NpPage\\RepositoryInterface');
        $this->object->setRepository($repository);
        $this->assertSame($repository, TestTool::getPropertyValue($this->object, 'repository'));
    }

    /**
     * @covers NpPage\Service::getRepository
     */
    public function testGetRepository()
    {
        $repository = $this->getMock('NpPage\\RepositoryInterface');
        $this->object->setRepository($repository);
        $this->assertSame($repository, $this->object->getRepository());
    }

    /**
     * @covers NpPage\Service::setSubscriber
     */
    public function testSetSubscriber()
    {
        $subscriber = $this->getMock('Zend\\EventManager\\ListenerAggregateInterface');
        $this->object->setSubscriber($subscriber);
        $this->assertSame($subscriber, TestTool::getPropertyValue($this->object, 'subscriber'));
    }

    /**
     * @covers NpPage\Service::getSubscriber
     */
    public function testGetSubscriber()
    {
        $subscriber = $this->getMock('Zend\\EventManager\\ListenerAggregateInterface');
        $this->object->setSubscriber($subscriber);
        $this->assertSame($subscriber, $this->object->getSubscriber());
    }

    /**
     * @depends testSetRepository
     * @covers NpPage\Service::activate
     */
    public function testActivate()
    {
        $requestedName = 'foo';
        $page = $this->getMock('NpPage\\Block\\Page');
        $repository = $this->getMock('NpPage\\RepositoryInterface');
        $repository->expects($this->once())
                ->method('getPage')
                ->with($this->equalTo($requestedName))
                ->will($this->returnValue($page));
        $repository->expects($this->once())
                ->method('setCurrentPage')
                ->with($this->equalTo($requestedName));
        $this->object->setRepository($repository);
        $this->object->activate($requestedName);
        $this->assertEquals($requestedName, TestTool::getPropertyValue($this->object, 'requestedName'));
        $this->assertTrue(TestTool::getPropertyValue($this->object, 'active'));
    }

    /**
     * @covers NpPage\Service::isActivated
     */
    public function testIsActivated()
    {
        $this->assertFalse($this->object->isActivated());
        $ref = new \ReflectionObject($this->object);
        $prop = $ref->getProperty('active');
        $prop->setAccessible(true);
        $prop->setValue($this->object, true);
        $this->assertTrue($this->object->isActivated());
    }

    /**
     * @covers NpPage\Service::subscribe
     */
    public function testSubscribe()
    {
        $subscriber = $this->getMock('Zend\\EventManager\\ListenerAggregateInterface');
        $eventManager = $this->getMock('Zend\\EventManager\\EventManagerInterface');
        $eventManager->expects($this->once())
                ->method('attachAggregate')
                ->with($this->identicalTo($subscriber));
        $this->object->setSubscriber($subscriber);
        $this->object->subscribe($eventManager);
    }

    /**
     * @covers NpPage\Service::onRoute
     */
    public function testOnRoute()
    {
        $event = new MvcEvent;
        $routeMatch = new RouteMatch(array());
        $event->setRouteMatch($routeMatch);

        $this->object->onRoute($event);
        $this->assertFalse($this->object->isActivated());

        $requestedName = 'foo';
        $repository = $this->getMock('NpPage\\RepositoryInterface');
        $repository->expects($this->once())
                ->method('getPage')
                ->with($this->equalTo($requestedName))
                ->will($this->returnValue($this->getMock('NpPage\\Block\\Page')));
        $repository->expects($this->once())
                ->method('setCurrentPage')
                ->with($this->equalTo($requestedName));
        $this->object->setRepository($repository);

        $routeMatch->setParam('page', $requestedName);
        $this->object->onRoute($event);
        $this->assertTrue($this->object->isActivated());
    }

    /**
     * @covers NpPage\Service::onDispatchError
     * @todo   Implement testOnDispatchError().
     */
    public function testOnDispatchError()
    {
        // Remove the following lines when you implement this test.
        $this->markTestIncomplete(
            'This test has not been implemented yet.'
        );
    }

    /**
     * @covers NpPage\Service::onRenderError
     * @todo   Implement testOnRenderError().
     */
    public function testOnRenderError()
    {
        // Remove the following lines when you implement this test.
        $this->markTestIncomplete(
            'This test has not been implemented yet.'
        );
    }

    /**
     * @covers NpPage\Service::setRequestedName
     */
    public function testSetRequestedName()
    {
        $requestedName = 'foo';
        $this->object->setRequestedName($requestedName);
        $this->assertEquals($requestedName, TestTool::getPropertyValue($this->object, 'requestedName'));
    }

    /**
     * @covers NpPage\Service::getRequestedName
     */
    public function testGetRequestedName()
    {
        $requestedName = 'foo';
        $this->object->setRequestedName($requestedName);
        $this->assertEquals($requestedName, $this->object->getRequestedName());
    }
}
